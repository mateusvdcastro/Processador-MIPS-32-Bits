// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/05/2023 16:20:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ULA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ULA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] Unit_Control_ALU;
reg [31:0] operand1;
reg [31:0] operand2;
// wires                                               
wire [31:0] Output_Result;
wire zero;

// assign statements (if any)                          
ULA i1 (
// port map - connection between master ports and signals/registers   
	.Output_Result(Output_Result),
	.Unit_Control_ALU(Unit_Control_ALU),
	.operand1(operand1),
	.operand2(operand2),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 
// Unit_Control_ALU[ 3 ]
initial
begin
	Unit_Control_ALU[3] = 1'b0;
end 
// Unit_Control_ALU[ 2 ]
initial
begin
	Unit_Control_ALU[2] = 1'b0;
end 
// Unit_Control_ALU[ 1 ]
initial
begin
	Unit_Control_ALU[1] = 1'b1;
end 
// Unit_Control_ALU[ 0 ]
initial
begin
	Unit_Control_ALU[0] = 1'b0;
end 
// operand1[ 31 ]
initial
begin
	operand1[31] = 1'b0;
end 
// operand1[ 30 ]
initial
begin
	operand1[30] = 1'b0;
end 
// operand1[ 29 ]
initial
begin
	operand1[29] = 1'b0;
end 
// operand1[ 28 ]
initial
begin
	operand1[28] = 1'b0;
end 
// operand1[ 27 ]
initial
begin
	operand1[27] = 1'b0;
end 
// operand1[ 26 ]
initial
begin
	operand1[26] = 1'b0;
end 
// operand1[ 25 ]
initial
begin
	operand1[25] = 1'b0;
end 
// operand1[ 24 ]
initial
begin
	operand1[24] = 1'b0;
end 
// operand1[ 23 ]
initial
begin
	operand1[23] = 1'b0;
end 
// operand1[ 22 ]
initial
begin
	operand1[22] = 1'b0;
end 
// operand1[ 21 ]
initial
begin
	operand1[21] = 1'b0;
end 
// operand1[ 20 ]
initial
begin
	operand1[20] = 1'b0;
end 
// operand1[ 19 ]
initial
begin
	operand1[19] = 1'b0;
end 
// operand1[ 18 ]
initial
begin
	operand1[18] = 1'b0;
end 
// operand1[ 17 ]
initial
begin
	operand1[17] = 1'b0;
end 
// operand1[ 16 ]
initial
begin
	operand1[16] = 1'b0;
end 
// operand1[ 15 ]
initial
begin
	operand1[15] = 1'b0;
end 
// operand1[ 14 ]
initial
begin
	operand1[14] = 1'b0;
end 
// operand1[ 13 ]
initial
begin
	operand1[13] = 1'b0;
end 
// operand1[ 12 ]
initial
begin
	operand1[12] = 1'b0;
end 
// operand1[ 11 ]
initial
begin
	operand1[11] = 1'b0;
end 
// operand1[ 10 ]
initial
begin
	operand1[10] = 1'b0;
end 
// operand1[ 9 ]
initial
begin
	operand1[9] = 1'b0;
end 
// operand1[ 8 ]
initial
begin
	operand1[8] = 1'b0;
end 
// operand1[ 7 ]
initial
begin
	operand1[7] = 1'b0;
end 
// operand1[ 6 ]
initial
begin
	operand1[6] = 1'b0;
end 
// operand1[ 5 ]
initial
begin
	operand1[5] = 1'b0;
end 
// operand1[ 4 ]
initial
begin
	operand1[4] = 1'b0;
end 
// operand1[ 3 ]
initial
begin
	operand1[3] = 1'b0;
end 
// operand1[ 2 ]
initial
begin
	operand1[2] = 1'b0;
end 
// operand1[ 1 ]
initial
begin
	operand1[1] = 1'b1;
end 
// operand1[ 0 ]
initial
begin
	operand1[0] = 1'b1;
end 
// operand2[ 31 ]
initial
begin
	operand2[31] = 1'b0;
end 
// operand2[ 30 ]
initial
begin
	operand2[30] = 1'b0;
end 
// operand2[ 29 ]
initial
begin
	operand2[29] = 1'b0;
end 
// operand2[ 28 ]
initial
begin
	operand2[28] = 1'b0;
end 
// operand2[ 27 ]
initial
begin
	operand2[27] = 1'b0;
end 
// operand2[ 26 ]
initial
begin
	operand2[26] = 1'b0;
end 
// operand2[ 25 ]
initial
begin
	operand2[25] = 1'b0;
end 
// operand2[ 24 ]
initial
begin
	operand2[24] = 1'b0;
end 
// operand2[ 23 ]
initial
begin
	operand2[23] = 1'b0;
end 
// operand2[ 22 ]
initial
begin
	operand2[22] = 1'b0;
end 
// operand2[ 21 ]
initial
begin
	operand2[21] = 1'b0;
end 
// operand2[ 20 ]
initial
begin
	operand2[20] = 1'b0;
end 
// operand2[ 19 ]
initial
begin
	operand2[19] = 1'b0;
end 
// operand2[ 18 ]
initial
begin
	operand2[18] = 1'b0;
end 
// operand2[ 17 ]
initial
begin
	operand2[17] = 1'b0;
end 
// operand2[ 16 ]
initial
begin
	operand2[16] = 1'b0;
end 
// operand2[ 15 ]
initial
begin
	operand2[15] = 1'b0;
end 
// operand2[ 14 ]
initial
begin
	operand2[14] = 1'b0;
end 
// operand2[ 13 ]
initial
begin
	operand2[13] = 1'b0;
end 
// operand2[ 12 ]
initial
begin
	operand2[12] = 1'b0;
end 
// operand2[ 11 ]
initial
begin
	operand2[11] = 1'b0;
end 
// operand2[ 10 ]
initial
begin
	operand2[10] = 1'b0;
end 
// operand2[ 9 ]
initial
begin
	operand2[9] = 1'b0;
end 
// operand2[ 8 ]
initial
begin
	operand2[8] = 1'b0;
end 
// operand2[ 7 ]
initial
begin
	operand2[7] = 1'b0;
end 
// operand2[ 6 ]
initial
begin
	operand2[6] = 1'b0;
end 
// operand2[ 5 ]
initial
begin
	operand2[5] = 1'b0;
end 
// operand2[ 4 ]
initial
begin
	operand2[4] = 1'b0;
end 
// operand2[ 3 ]
initial
begin
	operand2[3] = 1'b0;
end 
// operand2[ 2 ]
initial
begin
	operand2[2] = 1'b1;
end 
// operand2[ 1 ]
initial
begin
	operand2[1] = 1'b0;
end 
// operand2[ 0 ]
initial
begin
	operand2[0] = 1'b0;
end 
endmodule

