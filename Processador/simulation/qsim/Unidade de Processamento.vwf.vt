// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/05/2023 16:25:42"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          UnidadedeProcessamento
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UnidadedeProcessamento_vlg_vec_tst();
// constants                                           
// general purpose registers
reg RegWrite;
reg [4:0] RegisterRD;
reg [4:0] RegisterRS;
reg [4:0] RegisterRT;
reg [3:0] Unit_Control_ALU;
reg clock;
// wires                                               
wire [31:0] Out;
wire zero;

// assign statements (if any)                          
UnidadedeProcessamento i1 (
// port map - connection between master ports and signals/registers   
	.Out(Out),
	.RegWrite(RegWrite),
	.RegisterRD(RegisterRD),
	.RegisterRS(RegisterRS),
	.RegisterRT(RegisterRT),
	.Unit_Control_ALU(Unit_Control_ALU),
	.clock(clock),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 

// RegWrite
initial
begin
	RegWrite = 1'b1;
	# 10000;
	repeat(49)
	begin
		RegWrite = 1'b0;
		RegWrite = #10000 1'b1;
		# 10000;
	end
	RegWrite = 1'b0;
end 
// RegisterRD[ 4 ]
initial
begin
	RegisterRD[4] = 1'b0;
end 
// RegisterRD[ 3 ]
initial
begin
	RegisterRD[3] = 1'b0;
end 
// RegisterRD[ 2 ]
initial
begin
	RegisterRD[2] = 1'b0;
end 
// RegisterRD[ 1 ]
initial
begin
	RegisterRD[1] = 1'b0;
end 
// RegisterRD[ 0 ]
initial
begin
	RegisterRD[0] = 1'b0;
end 
// RegisterRS[ 4 ]
initial
begin
	RegisterRS[4] = 1'b1;
end 
// RegisterRS[ 3 ]
initial
begin
	RegisterRS[3] = 1'b1;
end 
// RegisterRS[ 2 ]
initial
begin
	RegisterRS[2] = 1'b1;
end 
// RegisterRS[ 1 ]
initial
begin
	RegisterRS[1] = 1'b1;
end 
// RegisterRS[ 0 ]
initial
begin
	RegisterRS[0] = 1'b0;
end 
// RegisterRT[ 4 ]
initial
begin
	RegisterRT[4] = 1'b1;
end 
// RegisterRT[ 3 ]
initial
begin
	RegisterRT[3] = 1'b1;
end 
// RegisterRT[ 2 ]
initial
begin
	RegisterRT[2] = 1'b1;
end 
// RegisterRT[ 1 ]
initial
begin
	RegisterRT[1] = 1'b1;
end 
// RegisterRT[ 0 ]
initial
begin
	RegisterRT[0] = 1'b1;
end 
// Unit_Control_ALU[ 3 ]
initial
begin
	Unit_Control_ALU[3] = 1'b0;
end 
// Unit_Control_ALU[ 2 ]
initial
begin
	Unit_Control_ALU[2] = 1'b0;
end 
// Unit_Control_ALU[ 1 ]
initial
begin
	Unit_Control_ALU[1] = 1'b1;
end 
// Unit_Control_ALU[ 0 ]
initial
begin
	Unit_Control_ALU[0] = 1'b0;
end 

// clock
initial
begin
	clock = 1'b1;
	# 10000;
	repeat(49)
	begin
		clock = 1'b0;
		clock = #10000 1'b1;
		# 10000;
	end
	clock = 1'b0;
end 
endmodule

